{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Shared/myProject/GitHub/Jamming/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Shared/myProject/GitHub/Jamming/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar accessToken = getAccessToken();\nvar expiresIn;\nvar clientId = \"59649a72094c46508c95980e7a188a9d\";\nvar authEndpoint = \"https://accounts.spotify.com/authorize\";\nvar redirectUri = \"https://everly.surge.sh\"; //const redirectUri = \"http://localhost:3000\";\n\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      if (window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/)) {\n        accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\n        expiresIn = window.location.href.match(/expires_in=([^&]*)/)[1];\n        window.setTimeout(function () {\n          return accessToken = \"\";\n        }, expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n        return accessToken;\n      } else {\n        var url = \"\".concat(authEndpoint, \"?client_id=\").concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);\n        window.location = url;\n      }\n    }\n  },\n  search: function search(searchTerm) {\n    //accessToken = this.getAccessToken();\n    {\n      console.log(accessToken);\n    }\n    return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(searchTerm.replace(\" \", \"%20\")), {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      if (jsonResponse.tracks.items) {\n        return jsonResponse.tracks.items.map(function (track) {\n          return {\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          };\n        });\n      }\n    });\n  },\n  savePlaylist: function () {\n    var _savePlaylist = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(playlistName, trackUris) {\n      var userId, playlistId, response, jsonResponse, nameResponse, tracksResponse;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!playlistName || !trackUris)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              _context.prev = 2;\n              _context.next = 5;\n              return fetch(\"https://api.spotify.com/v1/me\", {\n                headers: {\n                  Authorization: \"Bearer \".concat(accessToken)\n                }\n              });\n\n            case 5:\n              response = _context.sent;\n\n              if (response.ok) {\n                _context.next = 9;\n                break;\n              }\n\n              alert(\"There was a problem retrieving your user ID.\");\n              return _context.abrupt(\"return\");\n\n            case 9:\n              _context.next = 11;\n              return response.json();\n\n            case 11:\n              jsonResponse = _context.sent;\n              userId = jsonResponse.id;\n              _context.next = 15;\n              return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists\"), {\n                method: \"POST\",\n                headers: {\n                  Authorization: \"Bearer \".concat(accessToken),\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  name: playlistName\n                })\n              });\n\n            case 15:\n              nameResponse = _context.sent;\n\n              if (nameResponse.ok) {\n                _context.next = 19;\n                break;\n              }\n\n              alert(\"There was a problem posting the playlist name.\");\n              return _context.abrupt(\"return\");\n\n            case 19:\n              _context.next = 21;\n              return nameResponse.json();\n\n            case 21:\n              jsonResponse = _context.sent;\n              playlistId = jsonResponse.id;\n              _context.next = 25;\n              return fetch(\"https://api.spotify.com/v1/playlists/\".concat(playlistId, \"/tracks\"), {\n                method: \"POST\",\n                headers: {\n                  Authorization: \"Bearer \".concat(accessToken),\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  uris: trackUris\n                })\n              });\n\n            case 25:\n              tracksResponse = _context.sent;\n\n              if (tracksResponse.ok) {\n                _context.next = 29;\n                break;\n              }\n\n              alert(\"There was a problem posting the playlist tracks.\");\n              return _context.abrupt(\"return\");\n\n            case 29:\n              _context.next = 35;\n              break;\n\n            case 31:\n              _context.prev = 31;\n              _context.t0 = _context[\"catch\"](2);\n              console.log(_context.t0);\n              return _context.abrupt(\"return\");\n\n            case 35:\n              return _context.abrupt(\"return\", \"Done\");\n\n            case 36:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[2, 31]]);\n    }));\n\n    function savePlaylist(_x, _x2) {\n      return _savePlaylist.apply(this, arguments);\n    }\n\n    return savePlaylist;\n  }()\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/Shared/myProject/GitHub/Jamming/src/util/Spodify.js"],"names":["accessToken","getAccessToken","expiresIn","clientId","authEndpoint","redirectUri","Spotify","window","location","href","match","setTimeout","history","pushState","url","search","searchTerm","console","log","fetch","replace","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","playlistName","trackUris","ok","alert","userId","method","body","JSON","stringify","nameResponse","playlistId","uris","tracksResponse"],"mappings":"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","sourcesContent":["let accessToken = getAccessToken();\nlet expiresIn;\nconst clientId = \"59649a72094c46508c95980e7a188a9d\";\nconst authEndpoint = \"https://accounts.spotify.com/authorize\";\nconst redirectUri = \"https://everly.surge.sh\";\n//const redirectUri = \"http://localhost:3000\";\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      if (\n        window.location.href.match(/access_token=([^&]*)/) &&\n        window.location.href.match(/expires_in=([^&]*)/)\n      ) {\n        accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\n        expiresIn = window.location.href.match(/expires_in=([^&]*)/)[1];\n        window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n        return accessToken;\n      } else {\n        let url = `${authEndpoint}?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n        window.location = url;\n      }\n    }\n  },\n\n  search(searchTerm) {\n    //accessToken = this.getAccessToken();\n    {\n      console.log(accessToken);\n    }\n    return fetch(\n      `https://api.spotify.com/v1/search?type=track&q=${searchTerm.replace(\n        \" \",\n        \"%20\"\n      )}`,\n      {\n        headers: { Authorization: `Bearer ${accessToken}` }\n      }\n    )\n      .then(response => {\n        return response.json();\n      })\n      .then(jsonResponse => {\n        if (jsonResponse.tracks.items) {\n          return jsonResponse.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          }));\n        }\n      });\n  },\n\n  async savePlaylist(playlistName, trackUris) {\n    if (!playlistName || !trackUris) {\n      return;\n    }\n    //accessToken = this.getAccessToken();\n    let userId;\n    let playlistId;\n    try {\n      let response = await fetch(\"https://api.spotify.com/v1/me\", {\n        headers: { Authorization: `Bearer ${accessToken}` }\n      });\n      if (!response.ok) {\n        alert(\"There was a problem retrieving your user ID.\");\n        return;\n      }\n      let jsonResponse = await response.json();\n      userId = jsonResponse.id;\n      let nameResponse = await fetch(\n        `https://api.spotify.com/v1/users/${userId}/playlists`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: playlistName\n          })\n        }\n      );\n      if (!nameResponse.ok) {\n        alert(\"There was a problem posting the playlist name.\");\n        return;\n      }\n      jsonResponse = await nameResponse.json();\n      playlistId = jsonResponse.id;\n\n      let tracksResponse = await fetch(\n        `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({ uris: trackUris })\n        }\n      );\n      if (!tracksResponse.ok) {\n        alert(\"There was a problem posting the playlist tracks.\");\n        return;\n      }\n    } catch (error) {\n      console.log(error);\n      return;\n    }\n    return \"Done\";\n  }\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}