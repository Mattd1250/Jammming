{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Shared/myProject/jamming/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Shared/myProject/jamming/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar accessToken;\nvar expiresIn;\nvar clientId = \"1755523544f9437e937f776f3210bde4\";\nvar authEndpoint = \"https://accounts.spotify.com/authorize\";\nvar redirectUri = \"http://soliloquy.surge.sh\"; // const redirectUri = 'http://localhost:3000/';\n\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      if (window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/)) {\n        accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\n        expiresIn = window.location.href.match(/expires_in=([^&]*)/)[1];\n        window.setTimeout(function () {\n          return accessToken = \"\";\n        }, expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n        return accessToken;\n      } else {\n        var url = \"\".concat(authEndpoint, \"?client_id=\").concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);\n        window.location = url;\n      }\n    }\n  },\n  // search takes the term passed from the search function in App,\n  // searches for that title, artist or album on Spotify and returns the results.\n  search: function search(searchTerm) {\n    accessToken = this.getAccessToken();\n    return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(searchTerm), {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      if (jsonResponse.tracks.items) {\n        return jsonResponse.tracks.items.map(function (track) {\n          return {\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          };\n        });\n      }\n    });\n  },\n  // End of search\n  // savePlaylist creates a new playlist on Spotify with the name passed to it,\n  // then uploads the tracks into the new playlist.\n  savePlaylist: function () {\n    var _savePlaylist = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(playlistName, trackUris) {\n      var userId, playlistId, response, jsonResponse, nameResponse, tracksResponse;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!playlistName || !trackUris)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              accessToken = this.getAccessToken();\n              _context.prev = 3;\n              _context.next = 6;\n              return fetch(\"https://api.spotify.com/v1/me\", {\n                headers: {\n                  Authorization: \"Bearer \".concat(accessToken)\n                }\n              });\n\n            case 6:\n              response = _context.sent;\n\n              if (response.ok) {\n                _context.next = 10;\n                break;\n              }\n\n              alert(\"There was a problem retrieving your user ID.\");\n              return _context.abrupt(\"return\");\n\n            case 10:\n              _context.next = 12;\n              return response.json();\n\n            case 12:\n              jsonResponse = _context.sent;\n              userId = jsonResponse.id; // If the user ID was successfully retrieved, this section will create\n              // a new playlist on Spotify with the name chosen by the user\n\n              _context.next = 16;\n              return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists\"), {\n                method: \"POST\",\n                headers: {\n                  Authorization: \"Bearer \".concat(accessToken),\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  name: playlistName\n                })\n              });\n\n            case 16:\n              nameResponse = _context.sent;\n\n              if (nameResponse.ok) {\n                _context.next = 20;\n                break;\n              }\n\n              alert(\"There was a problem posting the playlist name.\");\n              return _context.abrupt(\"return\");\n\n            case 20:\n              _context.next = 22;\n              return nameResponse.json();\n\n            case 22:\n              jsonResponse = _context.sent;\n              playlistId = jsonResponse.id; // If the playlist was successfully created, this section will pass the\n              // list of tracks to the playlist in the form of uri's\n\n              _context.next = 26;\n              return fetch(\"https://api.spotify.com/v1/playlists/\".concat(playlistId, \"/tracks\"), {\n                method: \"POST\",\n                headers: {\n                  Authorization: \"Bearer \".concat(accessToken),\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  uris: trackUris\n                })\n              });\n\n            case 26:\n              tracksResponse = _context.sent;\n\n              if (tracksResponse.ok) {\n                _context.next = 30;\n                break;\n              }\n\n              alert(\"There was a problem posting the playlist tracks.\");\n              return _context.abrupt(\"return\");\n\n            case 30:\n              _context.next = 36;\n              break;\n\n            case 32:\n              _context.prev = 32;\n              _context.t0 = _context[\"catch\"](3);\n              // End of try\n              // Catch errors from try\n              console.log(_context.t0);\n              return _context.abrupt(\"return\");\n\n            case 36:\n              return _context.abrupt(\"return\", \"Done\");\n\n            case 37:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[3, 32]]);\n    }));\n\n    function savePlaylist(_x, _x2) {\n      return _savePlaylist.apply(this, arguments);\n    }\n\n    return savePlaylist;\n  }() // end of savePlaylist\n\n}; // end of Spotify method\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/Shared/myProject/jamming/src/util/Spodify2.js"],"names":["accessToken","expiresIn","clientId","authEndpoint","redirectUri","Spotify","getAccessToken","window","location","href","match","setTimeout","history","pushState","url","search","searchTerm","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","playlistName","trackUris","ok","alert","userId","method","body","JSON","stringify","nameResponse","playlistId","uris","tracksResponse","console","log"],"mappings":"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","sourcesContent":["let accessToken;\nlet expiresIn;\nconst clientId = \"1755523544f9437e937f776f3210bde4\";\nconst authEndpoint = \"https://accounts.spotify.com/authorize\";\nconst redirectUri = \"http://soliloquy.surge.sh\";\n// const redirectUri = 'http://localhost:3000/';\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      if (\n        window.location.href.match(/access_token=([^&]*)/) &&\n        window.location.href.match(/expires_in=([^&]*)/)\n      ) {\n        accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\n        expiresIn = window.location.href.match(/expires_in=([^&]*)/)[1];\n        window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n        return accessToken;\n      } else {\n        let url = `${authEndpoint}?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n        window.location = url;\n      }\n    }\n  },\n\n  // search takes the term passed from the search function in App,\n  // searches for that title, artist or album on Spotify and returns the results.\n  search(searchTerm) {\n    accessToken = this.getAccessToken();\n    return fetch(\n      `https://api.spotify.com/v1/search?type=track&q=${searchTerm}`,\n      {\n        headers: { Authorization: `Bearer ${accessToken}` }\n      }\n    )\n      .then(response => {\n        return response.json();\n      })\n      .then(jsonResponse => {\n        if (jsonResponse.tracks.items) {\n          return jsonResponse.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          }));\n        }\n      });\n  }, // End of search\n\n  // savePlaylist creates a new playlist on Spotify with the name passed to it,\n  // then uploads the tracks into the new playlist.\n  async savePlaylist(playlistName, trackUris) {\n    if (!playlistName || !trackUris) {\n      // If either playlistName or tracks is empty, return without doing anything\n      return;\n    }\n    accessToken = this.getAccessToken();\n    let userId;\n    let playlistId;\n    try {\n      // This section retrieves the user ID from Spotify,\n      // which is necessary for creating a new playlist\n\n      let response = await fetch(\"https://api.spotify.com/v1/me\", {\n        headers: { Authorization: `Bearer ${accessToken}` }\n      });\n      if (!response.ok) {\n        alert(\"There was a problem retrieving your user ID.\");\n        return;\n      }\n      let jsonResponse = await response.json();\n      userId = jsonResponse.id;\n\n      // If the user ID was successfully retrieved, this section will create\n      // a new playlist on Spotify with the name chosen by the user\n\n      let nameResponse = await fetch(\n        `https://api.spotify.com/v1/users/${userId}/playlists`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: playlistName\n          })\n        }\n      );\n      if (!nameResponse.ok) {\n        alert(\"There was a problem posting the playlist name.\");\n        return;\n      }\n      jsonResponse = await nameResponse.json();\n      playlistId = jsonResponse.id;\n\n      // If the playlist was successfully created, this section will pass the\n      // list of tracks to the playlist in the form of uri's\n\n      let tracksResponse = await fetch(\n        `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({ uris: trackUris })\n        }\n      );\n      if (!tracksResponse.ok) {\n        alert(\"There was a problem posting the playlist tracks.\");\n        return;\n      }\n    } catch (error) {\n      // End of try\n      // Catch errors from try\n      console.log(error);\n      return;\n    }\n    return \"Done\";\n  } // end of savePlaylist\n}; // end of Spotify method\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}