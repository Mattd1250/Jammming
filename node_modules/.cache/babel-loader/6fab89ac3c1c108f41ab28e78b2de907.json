{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Shared/myProject/jamming/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Shared/myProject/jamming/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar clientId = \"1755523544f9437e937f776f3210bde4\";\nvar redirctURL = \"http://localhost:3000/\";\nvar spotifyUrl = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirctURL);\nvar accessToken;\nvar expiresIn;\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      var url = window.location.href;\n      console.log(url);\n      var urlAccessToken = url.match(/access_token=([^&]*)/);\n      var urlExpiresIn = url.match(/expires_in=([^&]*)/);\n\n      if (urlAccessToken && urlExpiresIn) {\n        accessToken = urlAccessToken;\n        expiresIn = urlExpiresIn;\n        console.log(accessToken);\n        window.setTimeout(function () {\n          return accessToken = \"\";\n        }, expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n      } else {\n        window.location = spotifyUrl;\n      }\n    }\n  },\n  search: function () {\n    var _search = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(term) {\n      var response, jsonResponse;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(accessToken);\n              _context.next = 3;\n              return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n                headers: {\n                  Authorization: \"Bearer \".concat(accessToken)\n                }\n              });\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n\n            case 6:\n              jsonResponse = _context.sent;\n\n              if (!jsonResponse.artists) {\n                _context.next = 9;\n                break;\n              }\n\n              return _context.abrupt(\"return\", jsonResponse.artists.items.map(function (track) {\n                console.log(\"from spotify: \", track);\n                return {\n                  id: track.id,\n                  name: track.name,\n                  artist: track.artist,\n                  album: track.album,\n                  uri: track.uri\n                };\n              }));\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function search(_x) {\n      return _search.apply(this, arguments);\n    }\n\n    return search;\n  }()\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/Shared/myProject/jamming/src/util/Spodify.js"],"names":["clientId","redirctURL","spotifyUrl","accessToken","expiresIn","Spotify","getAccessToken","url","window","location","href","console","log","urlAccessToken","match","urlExpiresIn","setTimeout","history","pushState","search","term","fetch","headers","Authorization","response","json","jsonResponse","artists","items","map","track","id","name","artist","album","uri"],"mappings":";;AAAA,IAAMA,QAAQ,GAAG,kCAAjB;AACA,IAAMC,UAAU,GAAG,wBAAnB;AACA,IAAMC,UAAU,8DAAuDF,QAAvD,4EAAiIC,UAAjI,CAAhB;AAEA,IAAIE,WAAJ;AACA,IAAIC,SAAJ;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,cADc,4BACG;AACf,QAAIH,WAAJ,EAAiB;AACf,aAAOA,WAAP;AACD,KAFD,MAEO;AACL,UAAMI,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAA5B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACA,UAAIM,cAAc,GAAGN,GAAG,CAACO,KAAJ,CAAU,sBAAV,CAArB;AACA,UAAIC,YAAY,GAAGR,GAAG,CAACO,KAAJ,CAAU,oBAAV,CAAnB;;AACA,UAAID,cAAc,IAAIE,YAAtB,EAAoC;AAClCZ,QAAAA,WAAW,GAAGU,cAAd;AACAT,QAAAA,SAAS,GAAGW,YAAZ;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAYT,WAAZ;AACAK,QAAAA,MAAM,CAACQ,UAAP,CAAkB;AAAA,iBAAOb,WAAW,GAAG,EAArB;AAAA,SAAlB,EAA4CC,SAAS,GAAG,IAAxD;AACAI,QAAAA,MAAM,CAACS,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACD,OAND,MAMO;AACLV,QAAAA,MAAM,CAACC,QAAP,GAAkBP,UAAlB;AACD;AACF;AACF,GAnBa;AAqBRiB,EAAAA,MArBQ;AAAA;AAAA;AAAA,8CAqBDC,IArBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBZT,cAAAA,OAAO,CAACC,GAAR,CAAYT,WAAZ;AAtBY;AAAA,qBAuBWkB,KAAK,0DACwBD,IADxB,GAE1B;AACEE,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,mBAAYpB,WAAZ;AAAf;AADX,eAF0B,CAvBhB;;AAAA;AAuBNqB,cAAAA,QAvBM;AAAA;AAAA,qBA6BeA,QAAQ,CAACC,IAAT,EA7Bf;;AAAA;AA6BNC,cAAAA,YA7BM;;AAAA,mBA8BRA,YAAY,CAACC,OA9BL;AAAA;AAAA;AAAA;;AAAA,+CA+BHD,YAAY,CAACC,OAAb,CAAqBC,KAArB,CAA2BC,GAA3B,CAA+B,UAAAC,KAAK,EAAI;AAC7CnB,gBAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BkB,KAA9B;AACA,uBAAO;AACLC,kBAAAA,EAAE,EAAED,KAAK,CAACC,EADL;AAELC,kBAAAA,IAAI,EAAEF,KAAK,CAACE,IAFP;AAGLC,kBAAAA,MAAM,EAAEH,KAAK,CAACG,MAHT;AAILC,kBAAAA,KAAK,EAAEJ,KAAK,CAACI,KAJR;AAKLC,kBAAAA,GAAG,EAAEL,KAAK,CAACK;AALN,iBAAP;AAOD,eATM,CA/BG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAhB;AA4CA,eAAe9B,OAAf","sourcesContent":["const clientId = \"1755523544f9437e937f776f3210bde4\";\nconst redirctURL = \"http://localhost:3000/\";\nconst spotifyUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirctURL}`;\n\nlet accessToken;\nlet expiresIn;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      const url = window.location.href;\n      console.log(url);\n      let urlAccessToken = url.match(/access_token=([^&]*)/);\n      let urlExpiresIn = url.match(/expires_in=([^&]*)/);\n      if (urlAccessToken && urlExpiresIn) {\n        accessToken = urlAccessToken;\n        expiresIn = urlExpiresIn;\n        console.log(accessToken);\n        window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n      } else {\n        window.location = spotifyUrl;\n      }\n    }\n  },\n\n  async search(term) {\n    console.log(accessToken);\n    const response = await fetch(\n      `https://api.spotify.com/v1/search?type=track&q=${term}`,\n      {\n        headers: { Authorization: `Bearer ${accessToken}` }\n      }\n    );\n    const jsonResponse = await response.json();\n    if (jsonResponse.artists) {\n      return jsonResponse.artists.items.map(track => {\n        console.log(\"from spotify: \", track);\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artist,\n          album: track.album,\n          uri: track.uri\n        };\n      });\n    }\n  }\n};\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}