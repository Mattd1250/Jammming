{"ast":null,"code":"var clientId = \"1755523544f9437e937f776f3210bde4\";\nvar redirctURL = \"http://localhost:3000/\";\nvar accessToken;\nvar expiresIn;\n/*const Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      const url = window.location.href;\n      console.log(url);\n      let urlAccessToken = url.match(/access_token=([^&]*)/);\n      let urlExpiresIn = url.match(/expires_in=([^&]*)/);\n      if (urlAccessToken && urlExpiresIn) {\n        accessToken = urlAccessToken;\n        expiresIn = urlExpiresIn;\n        console.log(accessToken);\n        window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n        return accessToken;\n      } else {\n        let spotifyUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirctURL}`;\n        window.location = spotifyUrl;\n      }\n    }\n  },\n\n  search(term) {\n    console.log(accessToken);\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: { Authorization: `Bearer ${accessToken}` }\n    })\n      .then(\n        response => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error(\"Request failed!\");\n        },\n        networkError => {\n          console.log(networkError.message);\n        }\n      )\n      .then(jsonResponse => {\n        let tracksJSON = [];\n        if (jsonResponse.tracks.items) {\n          tracksJSON = jsonResponse.track.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artist,\n            album: track.album,\n            uri: track.uri\n          }));\n        }\n        return tracksJSON;\n      });\n  },\n\n  savePlaylist(playlistName, trackURIs) {\n    if (!playlistName || !trackURIs) {\n      return;\n    } else {\n      const userUrl = \"https://api.spotify.com/v1/me\";\n      const headers = {\n        Authorization: `Bearer ${accessToken}`\n      };\n      let userId = undefined;\n      let playlistId = undefined;\n      fetch(userUrl, {\n        headers: headers\n      })\n        .then(response => response.json())\n        .then(jsonResponse => (userId = jsonResponse.id))\n        .then(() => {\n          const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\n          fetch(createPlaylistUrl, {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify({\n              name: playlistName\n            })\n          })\n            .then(response => response.json())\n            .then(jsonResponse => (playlistId = jsonResponse.id))\n            .then(() => {\n              const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n              fetch(addPlaylistTracksUrl, {\n                method: \"POST\",\n                headers: headers,\n                body: JSON.stringify({\n                  uris: trackURIs\n                })\n              });\n            });\n        });\n    }\n  }\n};\n\nexport default Spotify;\n*/","map":{"version":3,"sources":["/Users/Shared/myProject/jamming/src/util/Spodify.js"],"names":["clientId","redirctURL","accessToken","expiresIn"],"mappings":"AAAA,IAAMA,QAAQ,GAAG,kCAAjB;AACA,IAAMC,UAAU,GAAG,wBAAnB;AAEA,IAAIC,WAAJ;AACA,IAAIC,SAAJ;AAEA","sourcesContent":["const clientId = \"1755523544f9437e937f776f3210bde4\";\nconst redirctURL = \"http://localhost:3000/\";\n\nlet accessToken;\nlet expiresIn;\n\n/*const Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      const url = window.location.href;\n      console.log(url);\n      let urlAccessToken = url.match(/access_token=([^&]*)/);\n      let urlExpiresIn = url.match(/expires_in=([^&]*)/);\n      if (urlAccessToken && urlExpiresIn) {\n        accessToken = urlAccessToken;\n        expiresIn = urlExpiresIn;\n        console.log(accessToken);\n        window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n        return accessToken;\n      } else {\n        let spotifyUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirctURL}`;\n        window.location = spotifyUrl;\n      }\n    }\n  },\n\n  search(term) {\n    console.log(accessToken);\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: { Authorization: `Bearer ${accessToken}` }\n    })\n      .then(\n        response => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error(\"Request failed!\");\n        },\n        networkError => {\n          console.log(networkError.message);\n        }\n      )\n      .then(jsonResponse => {\n        let tracksJSON = [];\n        if (jsonResponse.tracks.items) {\n          tracksJSON = jsonResponse.track.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artist,\n            album: track.album,\n            uri: track.uri\n          }));\n        }\n        return tracksJSON;\n      });\n  },\n\n  savePlaylist(playlistName, trackURIs) {\n    if (!playlistName || !trackURIs) {\n      return;\n    } else {\n      const userUrl = \"https://api.spotify.com/v1/me\";\n      const headers = {\n        Authorization: `Bearer ${accessToken}`\n      };\n      let userId = undefined;\n      let playlistId = undefined;\n      fetch(userUrl, {\n        headers: headers\n      })\n        .then(response => response.json())\n        .then(jsonResponse => (userId = jsonResponse.id))\n        .then(() => {\n          const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\n          fetch(createPlaylistUrl, {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify({\n              name: playlistName\n            })\n          })\n            .then(response => response.json())\n            .then(jsonResponse => (playlistId = jsonResponse.id))\n            .then(() => {\n              const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n              fetch(addPlaylistTracksUrl, {\n                method: \"POST\",\n                headers: headers,\n                body: JSON.stringify({\n                  uris: trackURIs\n                })\n              });\n            });\n        });\n    }\n  }\n};\n\nexport default Spotify;\n*/\n"]},"metadata":{},"sourceType":"module"}