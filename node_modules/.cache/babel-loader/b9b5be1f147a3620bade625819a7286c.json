{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Shared/myProject/jamming/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Shared/myProject/jamming/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar clientId = \"1755523544f9437e937f776f3210bde4\";\nvar redirctURL = \"http://localhost:3000/\";\nvar authEndpoint = \"https//accounts.spotify.com/authorize\";\nvar accessToken;\nvar expiresIn;\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      if (window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/)) {\n        accessToken = window.location.href.match(/access_token=([^&]*)/);\n        expiresIn = window.location.href.match(/expires_in=([^&]*)/);\n        console.log(accessToken);\n        window.setTimeout(function () {\n          return accessToken = \"\";\n        }, expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n        return accessToken;\n      } else {\n        var url = \"\".concat(authEndpoint, \"?client_id=\").concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirctURL);\n        window.location = url;\n      }\n    }\n  },\n  search: function search(searchTerm) {\n    accessToken = this.getAccessToken;\n    console.log(accessToken);\n    return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(searchTerm), {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      if (jsonResponse.tracks.items) {\n        return jsonResponse.track.items.map(function (track) {\n          return {\n            id: track.id,\n            name: track.name,\n            artist: track.artist,\n            album: track.album,\n            uri: track.uri\n          };\n        });\n      }\n    });\n  },\n\n  /*savePlaylist(playlistName, trackURIs) {\n    if (!playlistName || !trackURIs) {\n      return;\n    } else {\n      const userUrl = \"https://api.spotify.com/v1/me\";\n      const headers = {\n        Authorization: `Bearer ${accessToken}`\n      };\n      let userId = undefined;\n      let playlistId = undefined;\n      fetch(userUrl, {\n        headers: headers\n      })\n        .then(response => response.json())\n        .then(jsonResponse => (userId = jsonResponse.id))\n        .then(() => {\n          const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\n          fetch(createPlaylistUrl, {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify({\n              name: playlistName\n            })\n          })\n            .then(response => response.json())\n            .then(jsonResponse => (playlistId = jsonResponse.id))\n            .then(() => {\n              const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n              fetch(addPlaylistTracksUrl, {\n                method: \"POST\",\n                headers: headers,\n                body: JSON.stringify({\n                  uris: trackURIs\n                })\n              });\n            });\n        });\n    }\n  }*/\n  savePlaylist: function () {\n    var _savePlaylist = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(playlistName, trackUris) {\n      var userId, playlistId, response, jsonResponse, nameResponse, tracksResponse;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!playlistName || !trackUris)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              accessToken = this.getAccessToken();\n              _context.prev = 3;\n              _context.next = 6;\n              return fetch(\"https://api.spotify.com/v1/me\", {\n                headers: {\n                  Authorization: \"Bearer \".concat(accessToken)\n                }\n              });\n\n            case 6:\n              response = _context.sent;\n\n              if (response.ok) {\n                _context.next = 10;\n                break;\n              }\n\n              alert(\"There was a problem retrieving your user ID.\");\n              return _context.abrupt(\"return\");\n\n            case 10:\n              _context.next = 12;\n              return response.json();\n\n            case 12:\n              jsonResponse = _context.sent;\n              userId = jsonResponse.id; // If the user ID was successfully retrieved, this section will create\n              // a new playlist on Spotify with the name chosen by the user\n\n              _context.next = 16;\n              return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists\"), {\n                method: \"POST\",\n                headers: {\n                  Authorization: \"Bearer \".concat(accessToken),\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  name: playlistName\n                })\n              });\n\n            case 16:\n              nameResponse = _context.sent;\n\n              if (nameResponse.ok) {\n                _context.next = 20;\n                break;\n              }\n\n              alert(\"There was a problem posting the playlist name.\");\n              return _context.abrupt(\"return\");\n\n            case 20:\n              _context.next = 22;\n              return nameResponse.json();\n\n            case 22:\n              jsonResponse = _context.sent;\n              playlistId = jsonResponse.id; // If the playlist was successfully created, this section will pass the\n              // list of tracks to the playlist in the form of uri's\n\n              _context.next = 26;\n              return fetch(\"https://api.spotify.com/v1/playlists/\".concat(playlistId, \"/tracks\"), {\n                method: \"POST\",\n                headers: {\n                  Authorization: \"Bearer \".concat(accessToken),\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  uris: trackUris\n                })\n              });\n\n            case 26:\n              tracksResponse = _context.sent;\n\n              if (tracksResponse.ok) {\n                _context.next = 30;\n                break;\n              }\n\n              alert(\"There was a problem posting the playlist tracks.\");\n              return _context.abrupt(\"return\");\n\n            case 30:\n              _context.next = 36;\n              break;\n\n            case 32:\n              _context.prev = 32;\n              _context.t0 = _context[\"catch\"](3);\n              // End of try\n              // Catch errors from try\n              console.log(_context.t0);\n              return _context.abrupt(\"return\");\n\n            case 36:\n              return _context.abrupt(\"return\", \"Done\");\n\n            case 37:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[3, 32]]);\n    }));\n\n    function savePlaylist(_x, _x2) {\n      return _savePlaylist.apply(this, arguments);\n    }\n\n    return savePlaylist;\n  }()\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/Shared/myProject/jamming/src/util/Spodify.js"],"names":["clientId","redirctURL","authEndpoint","accessToken","expiresIn","Spotify","getAccessToken","window","location","href","match","console","log","setTimeout","history","pushState","url","search","searchTerm","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","track","map","id","name","artist","album","uri","savePlaylist","playlistName","trackUris","ok","alert","userId","method","body","JSON","stringify","nameResponse","playlistId","uris","tracksResponse"],"mappings":"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","sourcesContent":["const clientId = \"1755523544f9437e937f776f3210bde4\";\nconst redirctURL = \"http://localhost:3000/\";\nconst authEndpoint = \"https//accounts.spotify.com/authorize\";\nlet accessToken;\nlet expiresIn;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      if (\n        window.location.href.match(/access_token=([^&]*)/) &&\n        window.location.href.match(/expires_in=([^&]*)/)\n      ) {\n        accessToken = window.location.href.match(/access_token=([^&]*)/);\n        expiresIn = window.location.href.match(/expires_in=([^&]*)/);\n        console.log(accessToken);\n        window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n        return accessToken;\n      } else {\n        let url = `${authEndpoint}?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirctURL}`;\n        window.location = url;\n      }\n    }\n  },\n\n  search(searchTerm) {\n    accessToken = this.getAccessToken;\n    console.log(accessToken);\n    return fetch(\n      `https://api.spotify.com/v1/search?type=track&q=${searchTerm}`,\n      {\n        headers: { Authorization: `Bearer ${accessToken}` }\n      }\n    )\n      .then(response => {\n        return response.json();\n      })\n      .then(jsonResponse => {\n        if (jsonResponse.tracks.items) {\n          return jsonResponse.track.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artist,\n            album: track.album,\n            uri: track.uri\n          }));\n        }\n      });\n  },\n\n  /*savePlaylist(playlistName, trackURIs) {\n    if (!playlistName || !trackURIs) {\n      return;\n    } else {\n      const userUrl = \"https://api.spotify.com/v1/me\";\n      const headers = {\n        Authorization: `Bearer ${accessToken}`\n      };\n      let userId = undefined;\n      let playlistId = undefined;\n      fetch(userUrl, {\n        headers: headers\n      })\n        .then(response => response.json())\n        .then(jsonResponse => (userId = jsonResponse.id))\n        .then(() => {\n          const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\n          fetch(createPlaylistUrl, {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify({\n              name: playlistName\n            })\n          })\n            .then(response => response.json())\n            .then(jsonResponse => (playlistId = jsonResponse.id))\n            .then(() => {\n              const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n              fetch(addPlaylistTracksUrl, {\n                method: \"POST\",\n                headers: headers,\n                body: JSON.stringify({\n                  uris: trackURIs\n                })\n              });\n            });\n        });\n    }\n  }*/\n  async savePlaylist(playlistName, trackUris) {\n    if (!playlistName || !trackUris) {\n      // If either playlistName or tracks is empty, return without doing anything\n      return;\n    }\n    accessToken = this.getAccessToken();\n    let userId;\n    let playlistId;\n    try {\n      // This section retrieves the user ID from Spotify,\n      // which is necessary for creating a new playlist\n\n      let response = await fetch(\"https://api.spotify.com/v1/me\", {\n        headers: { Authorization: `Bearer ${accessToken}` }\n      });\n      if (!response.ok) {\n        alert(\"There was a problem retrieving your user ID.\");\n        return;\n      }\n      let jsonResponse = await response.json();\n      userId = jsonResponse.id;\n\n      // If the user ID was successfully retrieved, this section will create\n      // a new playlist on Spotify with the name chosen by the user\n\n      let nameResponse = await fetch(\n        `https://api.spotify.com/v1/users/${userId}/playlists`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: playlistName\n          })\n        }\n      );\n      if (!nameResponse.ok) {\n        alert(\"There was a problem posting the playlist name.\");\n        return;\n      }\n      jsonResponse = await nameResponse.json();\n      playlistId = jsonResponse.id;\n\n      // If the playlist was successfully created, this section will pass the\n      // list of tracks to the playlist in the form of uri's\n\n      let tracksResponse = await fetch(\n        `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({ uris: trackUris })\n        }\n      );\n      if (!tracksResponse.ok) {\n        alert(\"There was a problem posting the playlist tracks.\");\n        return;\n      }\n    } catch (error) {\n      // End of try\n      // Catch errors from try\n      console.log(error);\n      return;\n    }\n    return \"Done\";\n  }\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}