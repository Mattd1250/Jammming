{"ast":null,"code":"var clientId = \"1755523544f9437e937f776f3210bde4\";\nvar redirctURL = \"http://localhost:3000/\";\nvar accessToken;\nvar expiresIn;\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      var url = window.location.href;\n      console.log(url);\n      var urlAccessToken = url.match(/access_token=([^&]*)/);\n      var urlExpiresIn = url.match(/expires_in=([^&]*)/);\n\n      if (urlAccessToken && urlExpiresIn) {\n        accessToken = urlAccessToken;\n        expiresIn = urlExpiresIn;\n        window.setTimeout(function () {\n          return accessToken = \"\";\n        }, expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n      } else {\n        window.location.href = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirctURL, \"\\n            \");\n      }\n    }\n  },\n  search: function search(term) {\n    console.log(accessToken);\n    return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      } else {\n        return [];\n      }\n    }).then(function (jsonResponse) {\n      return jsonResponse.map(function (track) {\n        return console.log(track); //   {\n        //     id: track.id,\n        //     name: track.name,\n        //     artist: track.artists[0].name,\n        //     album: track.album.name,\n        //     uri: track.url\n        //   };\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/Shared/myProject/jamming/src/util/Spodify.js"],"names":["clientId","redirctURL","accessToken","expiresIn","Spotify","getAccessToken","url","window","location","href","console","log","urlAccessToken","match","urlExpiresIn","setTimeout","history","pushState","search","term","fetch","headers","Authorization","then","response","ok","json","jsonResponse","map","track"],"mappings":"AAAA,IAAMA,QAAQ,GAAG,kCAAjB;AACA,IAAMC,UAAU,GAAG,wBAAnB;AAEA,IAAIC,WAAJ;AACA,IAAIC,SAAJ;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,cADc,4BACG;AACf,QAAIH,WAAJ,EAAiB;AACf,aAAOA,WAAP;AACD,KAFD,MAEO;AACL,UAAMI,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAA5B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACA,UAAIM,cAAc,GAAGN,GAAG,CAACO,KAAJ,CAAU,sBAAV,CAArB;AACA,UAAIC,YAAY,GAAGR,GAAG,CAACO,KAAJ,CAAU,oBAAV,CAAnB;;AACA,UAAID,cAAc,IAAIE,YAAtB,EAAoC;AAClCZ,QAAAA,WAAW,GAAGU,cAAd;AACAT,QAAAA,SAAS,GAAGW,YAAZ;AACAP,QAAAA,MAAM,CAACQ,UAAP,CAAkB;AAAA,iBAAOb,WAAW,GAAG,EAArB;AAAA,SAAlB,EAA4CC,SAAS,GAAG,IAAxD;AACAI,QAAAA,MAAM,CAACS,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACD,OALD,MAKO;AACLV,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,8DAA2ET,QAA3E,4EAAqJC,UAArJ;AAED;AACF;AACF,GAnBa;AAqBdiB,EAAAA,MArBc,kBAqBPC,IArBO,EAqBD;AACXT,IAAAA,OAAO,CAACC,GAAR,CAAYT,WAAZ;AACA,WAAOkB,KAAK,0DAAmDD,IAAnD,GAA2D;AACrEE,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,mBAAYpB,WAAZ;AAAf;AAD4D,KAA3D,CAAL,CAGJqB,IAHI,CAGC,UAAAC,QAAQ,EAAI;AAChB,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,OAFD,MAEO;AACL,eAAO,EAAP;AACD;AACF,KATI,EAUJH,IAVI,CAUC,UAAAI,YAAY;AAAA,aAChBA,YAAY,CAACC,GAAb,CAAiB,UAAAC,KAAK,EAAI;AACxB,eAAOnB,OAAO,CAACC,GAAR,CAAYkB,KAAZ,CAAP,CADwB,CAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACD,OATD,CADgB;AAAA,KAVb,CAAP;AAsBD;AA7Ca,CAAhB;AAgDA,eAAezB,OAAf","sourcesContent":["const clientId = \"1755523544f9437e937f776f3210bde4\";\nconst redirctURL = \"http://localhost:3000/\";\n\nlet accessToken;\nlet expiresIn;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      const url = window.location.href;\n      console.log(url);\n      let urlAccessToken = url.match(/access_token=([^&]*)/);\n      let urlExpiresIn = url.match(/expires_in=([^&]*)/);\n      if (urlAccessToken && urlExpiresIn) {\n        accessToken = urlAccessToken;\n        expiresIn = urlExpiresIn;\n        window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n      } else {\n        window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirctURL}\n            `;\n      }\n    }\n  },\n\n  search(term) {\n    console.log(accessToken);\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: { Authorization: `Bearer ${accessToken}` }\n    })\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          return [];\n        }\n      })\n      .then(jsonResponse =>\n        jsonResponse.map(track => {\n          return console.log(track);\n          //   {\n          //     id: track.id,\n          //     name: track.name,\n          //     artist: track.artists[0].name,\n          //     album: track.album.name,\n          //     uri: track.url\n          //   };\n        })\n      );\n  }\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}