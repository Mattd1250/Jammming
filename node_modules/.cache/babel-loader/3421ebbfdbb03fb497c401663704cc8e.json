{"ast":null,"code":"var clientId = \"1755523544f9437e937f776f3210bde4\";\nvar redirctURL = \"http://localhost:3000/\";\nvar spotifyUrl = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirctURL);\nvar accessToken;\nvar expiresIn;\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      var url = window.location.href;\n      console.log(url);\n      var urlAccessToken = url.match(/access_token=([^&]*)/);\n      var urlExpiresIn = url.match(/expires_in=([^&]*)/);\n\n      if (urlAccessToken && urlExpiresIn) {\n        accessToken = urlAccessToken;\n        expiresIn = urlExpiresIn;\n        console.log(accessToken);\n        window.setTimeout(function () {\n          return accessToken = \"\";\n        }, expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n      } else {\n        window.location = spotifyUrl;\n      }\n    }\n  },\n  search: function search(term) {\n    console.log(accessToken);\n    return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      if (jsonResponse.artists) {\n        return jsonResponse.tracks.map(function (track) {\n          console.log(\"from spotify: \", track);\n          return {\n            id: track.id,\n            name: track.name,\n            artist: track.artist,\n            album: track.album,\n            uri: track.uri\n          };\n        });\n      }\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/Shared/myProject/jamming/src/util/Spodify.js"],"names":["clientId","redirctURL","spotifyUrl","accessToken","expiresIn","Spotify","getAccessToken","url","window","location","href","console","log","urlAccessToken","match","urlExpiresIn","setTimeout","history","pushState","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","artists","tracks","map","track","id","name","artist","album","uri"],"mappings":"AAAA,IAAMA,QAAQ,GAAG,kCAAjB;AACA,IAAMC,UAAU,GAAG,wBAAnB;AACA,IAAMC,UAAU,8DAAuDF,QAAvD,4EAAiIC,UAAjI,CAAhB;AAEA,IAAIE,WAAJ;AACA,IAAIC,SAAJ;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,cADc,4BACG;AACf,QAAIH,WAAJ,EAAiB;AACf,aAAOA,WAAP;AACD,KAFD,MAEO;AACL,UAAMI,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAA5B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACA,UAAIM,cAAc,GAAGN,GAAG,CAACO,KAAJ,CAAU,sBAAV,CAArB;AACA,UAAIC,YAAY,GAAGR,GAAG,CAACO,KAAJ,CAAU,oBAAV,CAAnB;;AACA,UAAID,cAAc,IAAIE,YAAtB,EAAoC;AAClCZ,QAAAA,WAAW,GAAGU,cAAd;AACAT,QAAAA,SAAS,GAAGW,YAAZ;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAYT,WAAZ;AACAK,QAAAA,MAAM,CAACQ,UAAP,CAAkB;AAAA,iBAAOb,WAAW,GAAG,EAArB;AAAA,SAAlB,EAA4CC,SAAS,GAAG,IAAxD;AACAI,QAAAA,MAAM,CAACS,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACD,OAND,MAMO;AACLV,QAAAA,MAAM,CAACC,QAAP,GAAkBP,UAAlB;AACD;AACF;AACF,GAnBa;AAqBdiB,EAAAA,MArBc,kBAqBPC,IArBO,EAqBD;AACXT,IAAAA,OAAO,CAACC,GAAR,CAAYT,WAAZ;AACA,WAAOkB,KAAK,0DAAmDD,IAAnD,GAA2D;AACrEE,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,mBAAYpB,WAAZ;AAAf;AAD4D,KAA3D,CAAL,CAGJqB,IAHI,CAGC,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KAHT,EAIJF,IAJI,CAIC,UAAAG,YAAY,EAAI;AACpB,UAAIA,YAAY,CAACC,OAAjB,EAA0B;AACxB,eAAOD,YAAY,CAACE,MAAb,CAAoBC,GAApB,CAAwB,UAAAC,KAAK,EAAI;AACtCpB,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BmB,KAA9B;AACA,iBAAO;AACLC,YAAAA,EAAE,EAAED,KAAK,CAACC,EADL;AAELC,YAAAA,IAAI,EAAEF,KAAK,CAACE,IAFP;AAGLC,YAAAA,MAAM,EAAEH,KAAK,CAACG,MAHT;AAILC,YAAAA,KAAK,EAAEJ,KAAK,CAACI,KAJR;AAKLC,YAAAA,GAAG,EAAEL,KAAK,CAACK;AALN,WAAP;AAOD,SATM,CAAP;AAUD;AACF,KAjBI,CAAP;AAkBD;AAzCa,CAAhB;AA2CA,eAAe/B,OAAf","sourcesContent":["const clientId = \"1755523544f9437e937f776f3210bde4\";\nconst redirctURL = \"http://localhost:3000/\";\nconst spotifyUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirctURL}`;\n\nlet accessToken;\nlet expiresIn;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      const url = window.location.href;\n      console.log(url);\n      let urlAccessToken = url.match(/access_token=([^&]*)/);\n      let urlExpiresIn = url.match(/expires_in=([^&]*)/);\n      if (urlAccessToken && urlExpiresIn) {\n        accessToken = urlAccessToken;\n        expiresIn = urlExpiresIn;\n        console.log(accessToken);\n        window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n      } else {\n        window.location = spotifyUrl;\n      }\n    }\n  },\n\n  search(term) {\n    console.log(accessToken);\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: { Authorization: `Bearer ${accessToken}` }\n    })\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.artists) {\n          return jsonResponse.tracks.map(track => {\n            console.log(\"from spotify: \", track);\n            return {\n              id: track.id,\n              name: track.name,\n              artist: track.artist,\n              album: track.album,\n              uri: track.uri\n            };\n          });\n        }\n      });\n  }\n};\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}