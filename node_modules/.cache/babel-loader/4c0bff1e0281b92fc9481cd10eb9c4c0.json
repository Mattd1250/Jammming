{"ast":null,"code":"var clientId = \"1755523544f9437e937f776f3210bde4\";\nvar redirctURL = \"http://localhost:3000/\";\nvar accessToken;\nvar expiresIn;\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      var url = window.location.href;\n      console.log(url);\n      var urlAccessToken = url.match(/access_token=([^&]*)/);\n      var urlExpiresIn = url.match(/expires_in=([^&]*)/);\n\n      if (urlAccessToken && urlExpiresIn) {\n        accessToken = urlAccessToken;\n        expiresIn = urlExpiresIn;\n        console.log(accessToken);\n        window.setTimeout(function () {\n          return accessToken = \"\";\n        }, expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n        return accessToken;\n      } else {\n        var spotifyUrl = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirctURL);\n        window.location = spotifyUrl;\n      }\n    }\n  },\n  search: function search(term) {\n    console.log(accessToken);\n    return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    }, function (networkError) {\n      console.log(networkError.message);\n    }).then(function (jsonResponse) {\n      var tracksJSON = [];\n\n      if (jsonResponse.tracks.items) {\n        tracksJSON = jsonResponse.track.items.map(function (track) {\n          return {\n            id: track.id,\n            name: track.name,\n            artist: track.artist,\n            album: track.album,\n            uri: track.uri\n          };\n        });\n      }\n\n      return tracksJSON;\n    });\n  },\n  savePlaylist: function savePlaylist(playlistName, trackURIs) {\n    if (!playlistName || !trackURIs) {\n      return;\n    } else {\n      var userUrl = \"https://api.spotify.com/v1/me\";\n      var headers = {\n        Authorization: \"Bearer \".concat(accessToken)\n      };\n      var userId = undefined;\n      var playlistId = undefined;\n      fetch(userUrl, {\n        headers: headers\n      }).then(function (response) {\n        return response.json();\n      }).then(function (jsonResponse) {\n        return userId = jsonResponse.id;\n      }).then(function () {\n        var createPlaylistUrl = \"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists\");\n        fetch(createPlaylistUrl, {\n          method: \"POST\",\n          headers: headers,\n          body: JSON.stringify({\n            name: playlistName\n          })\n        }).then(function (response) {\n          return response.json();\n        }).then(function (jsonResponse) {\n          return playlistId = jsonResponse.id;\n        }).then(function () {\n          var addPlaylistTracksUrl = \"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists/\").concat(playlistId, \"/tracks\");\n          fetch(addPlaylistTracksUrl, {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify({\n              uris: trackUris\n            })\n          });\n        });\n      });\n    }\n  }\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/Shared/myProject/jamming/src/util/Spodify.js"],"names":["clientId","redirctURL","accessToken","expiresIn","Spotify","getAccessToken","url","window","location","href","console","log","urlAccessToken","match","urlExpiresIn","setTimeout","history","pushState","spotifyUrl","search","term","fetch","headers","Authorization","then","response","ok","json","Error","networkError","message","jsonResponse","tracksJSON","tracks","items","track","map","id","name","artist","album","uri","savePlaylist","playlistName","trackURIs","userUrl","userId","undefined","playlistId","createPlaylistUrl","method","body","JSON","stringify","addPlaylistTracksUrl","uris","trackUris"],"mappings":"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","sourcesContent":["const clientId = \"1755523544f9437e937f776f3210bde4\";\nconst redirctURL = \"http://localhost:3000/\";\n\nlet accessToken;\nlet expiresIn;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      const url = window.location.href;\n      console.log(url);\n      let urlAccessToken = url.match(/access_token=([^&]*)/);\n      let urlExpiresIn = url.match(/expires_in=([^&]*)/);\n      if (urlAccessToken && urlExpiresIn) {\n        accessToken = urlAccessToken;\n        expiresIn = urlExpiresIn;\n        console.log(accessToken);\n        window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n        return accessToken;\n      } else {\n        let spotifyUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirctURL}`;\n        window.location = spotifyUrl;\n      }\n    }\n  },\n\n  search(term) {\n    console.log(accessToken);\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: { Authorization: `Bearer ${accessToken}` }\n    })\n      .then(\n        response => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error(\"Request failed!\");\n        },\n        networkError => {\n          console.log(networkError.message);\n        }\n      )\n      .then(jsonResponse => {\n        let tracksJSON = [];\n        if (jsonResponse.tracks.items) {\n          tracksJSON = jsonResponse.track.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artist,\n            album: track.album,\n            uri: track.uri\n          }));\n        }\n        return tracksJSON;\n      });\n  },\n\n  savePlaylist(playlistName, trackURIs) {\n    if (!playlistName || !trackURIs) {\n      return;\n    } else {\n      const userUrl = \"https://api.spotify.com/v1/me\";\n      const headers = {\n        Authorization: `Bearer ${accessToken}`\n      };\n      let userId = undefined;\n      let playlistId = undefined;\n      fetch(userUrl, {\n        headers: headers\n      })\n        .then(response => response.json())\n        .then(jsonResponse => (userId = jsonResponse.id))\n        .then(() => {\n          const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\n          fetch(createPlaylistUrl, {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify({\n              name: playlistName\n            })\n          })\n            .then(response => response.json())\n            .then(jsonResponse => (playlistId = jsonResponse.id))\n            .then(() => {\n              const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n              fetch(addPlaylistTracksUrl, {\n                method: \"POST\",\n                headers: headers,\n                body: JSON.stringify({\n                  uris: trackUris\n                })\n              });\n            });\n        });\n    }\n  }\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}