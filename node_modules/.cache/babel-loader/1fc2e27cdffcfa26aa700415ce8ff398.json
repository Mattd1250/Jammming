{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Shared/myProject/jamming/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Shared/myProject/jamming/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar clientId = \"1755523544f9437e937f776f3210bde4\";\nvar redirctURL = \"http://localhost:3000/\";\nvar accessToken;\nvar expiresIn;\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      var url = window.location.href;\n      console.log(url);\n      var urlAccessToken = url.match(/access_token=([^&]*)/);\n      var urlExpiresIn = url.match(/expires_in=([^&]*)/);\n\n      if (urlAccessToken && urlExpiresIn) {\n        accessToken = urlAccessToken;\n        expiresIn = urlExpiresIn;\n        console.log(accessToken);\n        window.setTimeout(function () {\n          return accessToken = \"\";\n        }, expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n        return accessToken;\n      } else {\n        var spotifyUrl = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirctURL);\n        window.location = spotifyUrl;\n      }\n    }\n  },\n  search: function search(term) {\n    console.log(accessToken);\n    return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    }, function (networkError) {\n      console.log(networkError.message);\n    }).then(function (jsonResponse) {\n      var tracksJSON = [];\n\n      if (jsonResponse.tracks.items) {\n        tracksJSON = jsonResponse.track.items.map(function (track) {\n          return {\n            id: track.id,\n            name: track.name,\n            artist: track.artist,\n            album: track.album,\n            uri: track.uri\n          };\n        });\n      }\n\n      return tracksJSON;\n    });\n  },\n  savePlaylist: function () {\n    var _savePlaylist = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(playlistName, trackURIs) {\n      var usersID, usersAccessToken, headers;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!playlistName || !trackURIs)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 4:\n              usersAccessToken = accessToken;\n              headers = {\n                Authorization: \"Bearer \".concat(accessToken)\n              };\n              fetch(\"https://accounts.spotify.com/authorize\");\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function savePlaylist(_x, _x2) {\n      return _savePlaylist.apply(this, arguments);\n    }\n\n    return savePlaylist;\n  }()\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/Shared/myProject/jamming/src/util/Spodify.js"],"names":["clientId","redirctURL","accessToken","expiresIn","Spotify","getAccessToken","url","window","location","href","console","log","urlAccessToken","match","urlExpiresIn","setTimeout","history","pushState","spotifyUrl","search","term","fetch","headers","Authorization","then","response","ok","json","Error","networkError","message","jsonResponse","tracksJSON","tracks","items","track","map","id","name","artist","album","uri","savePlaylist","playlistName","trackURIs","usersAccessToken"],"mappings":"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","sourcesContent":["const clientId = \"1755523544f9437e937f776f3210bde4\";\nconst redirctURL = \"http://localhost:3000/\";\n\nlet accessToken;\nlet expiresIn;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      const url = window.location.href;\n      console.log(url);\n      let urlAccessToken = url.match(/access_token=([^&]*)/);\n      let urlExpiresIn = url.match(/expires_in=([^&]*)/);\n      if (urlAccessToken && urlExpiresIn) {\n        accessToken = urlAccessToken;\n        expiresIn = urlExpiresIn;\n        console.log(accessToken);\n        window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n        return accessToken;\n      } else {\n        let spotifyUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirctURL}`;\n        window.location = spotifyUrl;\n      }\n    }\n  },\n\n  search(term) {\n    console.log(accessToken);\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: { Authorization: `Bearer ${accessToken}` }\n    })\n      .then(\n        response => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error(\"Request failed!\");\n        },\n        networkError => {\n          console.log(networkError.message);\n        }\n      )\n      .then(jsonResponse => {\n        let tracksJSON = [];\n        if (jsonResponse.tracks.items) {\n          tracksJSON = jsonResponse.track.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artist,\n            album: track.album,\n            uri: track.uri\n          }));\n        }\n        return tracksJSON;\n      });\n  },\n\n  async savePlaylist(playlistName, trackURIs) {\n    if (!playlistName || !trackURIs) {\n      return;\n    } else {\n      let usersID;\n    }\n    const usersAccessToken = accessToken;\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    fetch(\"https://accounts.spotify.com/authorize\");\n  }\n};\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}